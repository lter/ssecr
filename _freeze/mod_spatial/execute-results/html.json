{
  "hash": "700a698b998f87226f17df30f7759b56",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Working with Spatial Data\"\ncode-annotations: hover\n---\n\n\n## Overview\n\nSynthesis projects often have need of spatial datasets. At its simplest, it can be helpful to have a map of the original project locations including in the synthesis dataset. In more complex instances you want to extract spatial data within a certain area of sampling locations. Regardless of 'why' you're using spatial data, it may come up during your primary or synthesis work and thus deserves consideration in this course's materials. There are _many_ modes of working with spatial data, and not all of these tools require coding literacy but for consistency with the rest of the modules **this module will focus on _scripted_ approaches to interacting with spatial data**.\n\n## Learning Objectives\n\nAfter completing this topic you will be able to: \n\n- <u>Define</u> the difference between the two major types of spatial data\n- <u>Manipulate</u> spatial data with R\n- <u>Integrate</u> spatial data with tabular data\n\n## Needed Packages\n\nIf you'd like to follow along with the code chunks included throughout this module, you'll need to install the following packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note that these lines only need to be run once per computer\n## So you can skip this step if you've installed these before\ninstall.packages(\"tidyverse\")\ninstall.packages(\"sf\")\ninstall.packages(\"terra\")\n```\n:::\n\n\n## Types of Spatial Data\n\nThere are two main types of spatial data: vector and raster. You may have cause to work either or both so we'll describe both (and the packages they require) in the tabs below.\n\n:::{.panel-tabset}\n### Vector Data\n\nData stored as polygons / shapes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load needed library\nlibrary(sf)\n```\n:::\n\n\n### Raster Data\n\nData stored as pixels\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load needed library\nlibrary(terra)\n```\n:::\n\n\n:::\n\n## Coordinate Reference Systems\n\nA fundamental problem in spatial data is how to project data collected on a nearly spherical planet onto a two-dimensional plane. This has been solved--or at least clarified--by the use of <u>C</u>oordinate <u>R</u>eference <u>S</u>ystems (a.k.a. \"CRS\"). All spatial data have a CRS that is explicitly identified in the data and/or the metadata because the data _are not interpretable_ without knowing which CRS is used.\n\n\nThe CRS defines the following information:\n\n1. **Datum** -- model for shape of the Earth including the starting coordinate pair and angular units that together define any particular point on the planet\n    - Note that there can be global datums that work for any region of the world and local datums that only work for a particular area\n2. **Projection** -- math for the transformation to get from a round planet to a flat map\n3. **Additional parameters** -- any other information necessary to support the projection\n    - E.g., the coordinates at the center of the map\n\nSome people use the analogy of peeling a citrus fruit and flattening the peel to describe the components of a CRS. The datum is the choice between a lemon or a grapefruit (i.e., the shape of the not-quite-spherical object) while the projection is the instructions for taking the complete peel and flattening it.\n\nYou can check and transform the CRS in any scripted language that allows the loading of spatial data though the specifics do differ between the two types of spatial data we introduced earlier.\n\n:::{.panel-tabset}\n### Vector CRS\n\n\n`sf::st_crs`\n\n\n::: {.cell}\n\n:::\n\n\n\n`sf::st_transform`\n\n\n::: {.cell}\n\n:::\n\n\n### Raster CRS\n\n`terra::crs`\n\n\n::: {.cell}\n\n:::\n\n\n\n`terra::project`\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n## Making Maps\n\n\n\n\n\n## Extracting Spatial Data\n\n\n\n\n\n## Additional Spatial Resources\n\n### Papers & Documents\n\n- \n\n### Workshops & Courses\n\n- The Carpentries' [Introduction to Geospatial Raster & Vector Data with R](https://datacarpentry.org/r-raster-vector-geospatial/)\n- The Carpentries' [Introduction to R for Geospatial Data](https://datacarpentry.org/r-intro-geospatial/index.html)\n- Arctic Data Center's [Spatial and Image Data Using GeoPandas](https://learning.nceas.ucsb.edu/2023-03-arctic/sections/geopandas.html) chapter of their Scalable Computing course\n- Jason Flower's (UC Santa Barbara) [Introduction to rasters with `terra`](https://jflowernet.github.io/intro-terra-ecodatascience/)\n- King, R. [Spatial Data Visualization](https://github.com/king0708/spatial-data-viz) workshop\n\n### Websites\n\n- NASA's <u>App</u>lication for <u>E</u>xtracting and <u>E</u>xploring <u>A</u>nalysis <u>R</u>eady <u>S</u>amples [(AppEEARS) Portal](https://appeears.earthdatacloud.nasa.gov/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}