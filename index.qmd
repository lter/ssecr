---
title: "Course Overview"
---

Synthesis Skills for Early Career Researchers (SSECR; _\[SEE-ker\]_) is a newly-designed course organized by the Long Term Ecological Research (LTER) Network. This course aims to address the need for more comprehensive interpersonal and data skills in ecology. You can find more information on SSECR at the [LTER Network page for the course](https://lternet.edu/ssecr/).

If instead you're interested in joining as a team project mentor you can find more information--and apply--[here](https://lternet.edu/ssecr-mentor-application/).

## Course Priorities

- Surface and test new synthesis ideas for feasibility
- Prepare more graduate students to be effective participants in/leaders of the synthesis projects
- Connect LTER graduate students across sites
- Develop intergenerational linkages around synthesis research

## Course Description

The course is structured around small group synthesis projects, so that lessons are immediately applied to a synthesis problem that is relevant to learners and will likely result in a publication. The course starts with an in-person launch to establish cohort cohesion and ensure that any setup issues are resolved. Participants will pitch projects to the group and assemble a team of collaborators.The ideal configuration would be 6 project teams of 4-5 students each. Prior to the start of the course, the Network Office will recruit a corps of potential project mentors, who will be matched with participant projects and who agree to meet with students approximately 4-5 times per year.

Applicants will propose modest or exploratory synthesis projects as part of the application process. In addition to ideas stemming from participants' own work, course mentors will make available a small library of synthesis ideas in search of execution. The in-person kickoff week will focus on cohort-building, pitching projects and assembling project teams, identifying relevant data, and getting set up on servers and collaboration tools.

## Course Scheduling

Course participants meet for three hours, weekly, at the same time each week. Sessions alternate between hands-on instruction in technical and soft skills that are relevant for inclusive synthesis and team work on the chosen group projects.

Each three-hour session will include 2 components:

1. **Networking (\~60 minutes)**: Presentation by one or more experienced synthesis scientists, describing why and how they conduct synthesis. This diverse group of researchers will be recruited from across the field and course participants will have ample time for discussion with each presenter.
2. **Instruction (~120 minutes)**: Each session will focus on a specific instructional topic, with technical skills, team-science skills, and communication topics interspersed throughout the year. The discussion will be limited to official course participants, but instructional materials for each topic will be available online, allowing individuals or site- or topic-based groups to follow along independently. 
    - Technical skills will build on earlier lessons and are not intended to be stand-alone modules.
The course will include social and leadership skills required to bring a synthesis project from idea to completion (or, for larger projects to completed proposal) and will include techniques for ensuring that multiple thinking and learning styles are respected and valued.

Project groups will also meet at a time of their own choosing to work on projects. Project mentors are encouraged to participate in work sessions at least 4 times throughout the year.

:::{.panel-tabset}
### 2024 Schedule

| **Date** | **Module** | **Primary Instructor(s)** |
|:---:|:----------------------------|:---:|
| 9/5/24 | Version Control | [Nick Lyon](https://njlyon0.github.io/); [Angel Chen](https://angelchen7.github.io/) |
| 9/16-20/24 | Reproducibility Best Practices | [Nick Lyon](https://njlyon0.github.io/) |
| 10/3/24 | Data Discovery & Management | [Li Kui](https://orcid.org/0000-0002-5894-4907); [Marty Downs](https://orcid.org/0000-0003-2833-956X) |
| 10/17/24 | Team Sciences Practices | [Marty Downs](https://orcid.org/0000-0003-2833-956X); [Carrie Kappel](https://legacyworksgroup.com/team-content/carrie-kappel) |
| 10/31/24 | Inclusive Facilitation | [Carrie Kappel](https://legacyworksgroup.com/team-content/carrie-kappel) |
| 11/14/24 | Data Visualization & Exploration | [Sarah Elmendorf](https://www.colorado.edu/instaar/sarah-elmendorf); [Nick Lyon](https://njlyon0.github.io/) |
| 12/5/24 | Project Management | [Marty Downs](https://orcid.org/0000-0003-2833-956X) |
| 12/19/24 | Supporting Divergent, Emergent, and Convergent Thinking | [Carrie Kappel](https://legacyworksgroup.com/team-content/carrie-kappel) |
| 1/16/25 | Data Wrangling | [Nick Lyon](https://njlyon0.github.io/) |
| 1/30/25 | Authorship & Intellectual Credit | [Marty Downs](https://orcid.org/0000-0003-2833-956X) |
| 2/13/25 | **Canceled**
| 2/27/25 | Analysis & Modeling | [Nick Lyon](https://njlyon0.github.io/) |
| 3/13/25 | Next Steps & Logic Models | [Marty Downs](https://orcid.org/0000-0003-2833-956X) |
| 3/27/25 | Communicating Findings | [Gabriel de la Rosa](https://www.gabrieldelarosa.com/) |
| 4/10/25 | Reproducible Reports | [Nick Lyon](https://njlyon0.github.io/) |
| 4/24/25 | _Bonus Module / Optional Prep_ | TBD |
| 5/8/25 | _Optional Prep_ | TBD |
| 5/22/25 | **Final Project Symposium** | _SSECR Participants!_ |
| 5/28/25 | Public Presentations on LTER Community Call | _SSECR Participants!_ |

:::

## Note on Coding Languages

The example code throughout this course is in the programming language [R](https://cran.r-project.org/). This language is widely used--particularly in the life sciences--but is certainly not the only option for working with data! It is not possible to have variants of this course in every coding language but even though we can't cover them specifically, we can make some broad points about how coding languages differ that will hopefully help you adapt your thinking if you choose to use a different coding language.

Even relatively similar coding languages almost always use different syntax. This means that the specific command to accomplish a particular action is likely to differ between languages. The interpretation of certain characters is also likely to differ. For example, R does not interpret indentation while Python requires indented code for nested operations (e.g., code inside of a loop). So, when you know one language, you might (_might!_) be able to apply the same order of operations but the specific functions and tools you use to accomplish that will almost certainly differ. If you use a language other than what this course uses in its example code, you should focus more on the logical flow in the following demos than on the specific packages and functions that are used.

For languages that are more distantly related to one another, it's possible that differences might be go beyond mere syntax: the core logic or philosophy of the languages might differ. Learning a very different language takes time and is often better approached by starting with the philosophical differences from the language(s) with which you are already familiar. Once you understand these fundamental differences you'll have a new framework to be able to "plug in" the new syntax which will make that much easier than trying to learn the new vocabulary at the same time as the new logical flow.

## Course Policies

### Attendance

{{< include policy/attendance.qmd >}}

### Usability, Accessibility, and Design

{{< include policy/usability.qmd >}}

### Artificial Intelligence Tools

{{< include policy/ai.qmd >}}

### Name, Gender Identity, and/or Gender Expression

{{< include policy/pronouns.qmd >}}

### Code of Conduct

{{< include policy/conduct.qmd >}}
